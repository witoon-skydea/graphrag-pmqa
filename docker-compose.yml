version: '3'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.11.0
    container_name: graphrag-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
    networks:
      - graphrag-network
    restart: unless-stopped

  # Ollama for Embeddings and Entity Analysis
  ollama:
    image: ollama/ollama:latest
    container_name: graphrag-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - graphrag-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]

  # Backend FastAPI Application
  backend:
    build:
      context: .
      dockerfile: backend.dockerfile
    container_name: graphrag-backend
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - ./data:/data
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - OLLAMA_BASE_URL=http://ollama:11434
      - CHROMA_PERSIST_DIRECTORY=/data/chroma_db
      - DOCUMENTS_BASE_DIR=/data/documents
      - PMQA_STRUCTURE_FILE=/data/pmqa_structure.json
    depends_on:
      - neo4j
      - ollama
    networks:
      - graphrag-network
    restart: unless-stopped

  # Frontend Streamlit Application
  frontend:
    build:
      context: .
      dockerfile: frontend.dockerfile
    container_name: graphrag-frontend
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app
    environment:
      - API_BASE_URL=http://backend:8000/api
    depends_on:
      - backend
    networks:
      - graphrag-network
    restart: unless-stopped

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  ollama_data:

networks:
  graphrag-network:
    driver: bridge
