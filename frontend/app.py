import streamlit as st
import requests
import json
import os
import time
from datetime import datetime
import pandas as pd
import io

# Set page configuration
st.set_page_config(
    page_title="GraphRAG PMQA",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# API Base URL
API_BASE_URL = "http://localhost:8000/api"

# CSS Styling
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1E88E5;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        font-weight: bold;
        color: #424242;
        margin-bottom: 1rem;
    }
    .card {
        padding: 1.5rem;
        border-radius: 0.5rem;
        background-color: #f9f9f9;
        margin-bottom: 1rem;
        border-left: 4px solid #1E88E5;
    }
    .stat-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    .stat-card {
        background-color: #f0f8ff;
        padding: 1rem;
        border-radius: 0.5rem;
        flex: 1;
        min-width: 200px;
        text-align: center;
        border: 1px solid #e0e0e0;
    }
    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: #1E88E5;
    }
    .stat-label {
        font-size: 0.9rem;
        color: #616161;
    }
    .footer {
        margin-top: 3rem;
        text-align: center;
        font-size: 0.8rem;
        color: #9e9e9e;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # Sidebar navigation
    st.sidebar.markdown("# GraphRAG PMQA")
    st.sidebar.markdown("---")
    
    # Navigation options
    pages = {
        "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å": home_page,
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": upload_page,
        "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": documents_page,
        "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": search_page,
        "‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Claude AI": chat_page,
        "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA": pmqa_structure_page,
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö": system_status_page
    }
    
    selection = st.sidebar.radio("‡πÄ‡∏°‡∏ô‡∏π", list(pages.keys()))
    
    # Display the selected page
    pages[selection]()
    
    # Footer
    st.markdown("""
    <div class="footer">
        GraphRAG for PMQA 4.0 ¬© 2025
    </div>
    """, unsafe_allow_html=True)

def home_page():
    # Header
    st.markdown('<div class="main-header">GraphRAG for PMQA 4.0</div>', unsafe_allow_html=True)
    st.markdown("""
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA 4.0 (Public Sector Management Quality Award) 
    ‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Graph Database ‡πÅ‡∏•‡∏∞ Vector Search ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    """)
    
    # System statistics
    st.markdown('<div class="sub-header">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö</div>', unsafe_allow_html=True)
    
    # Try to get document count
    try:
        response = requests.get(f"{API_BASE_URL}/documents?limit=1")
        if response.status_code == 200:
            doc_count = response.json().get("total", 0)
        else:
            doc_count = "N/A"
    except:
        doc_count = "N/A"
    
    # Mock data for demonstration
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="stat-card">
            <div class="stat-value">{}</div>
            <div class="stat-label">‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
        </div>
        """.format(doc_count), unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="stat-card">
            <div class="stat-value">7</div>
            <div class="stat-label">‡∏´‡∏°‡∏ß‡∏î PMQA</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="stat-card">
            <div class="stat-value">14</div>
            <div class="stat-label">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="stat-card">
            <div class="stat-value">28</div>
            <div class="stat-label">‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Feature cards
    st.markdown('<div class="sub-header">‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="card">
            <h3>üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h3>
            <p>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA 4.0 ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", key="upload_btn"):
            st.switch_page("app.py")  # This will reload the page with the upload_page query param
    
    with col2:
        st.markdown("""
        <div class="card">
            <h3>üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞</h3>
            <p>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Vector Search ‡πÅ‡∏•‡∏∞ Graph Database ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", key="search_btn"):
            st.switch_page("app.py")  # This will reload the page with the search_page query param
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="card">
            <h3>üí¨ ‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Claude AI</h3>
            <p>‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PMQA 4.0 ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Claude AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö", key="chat_btn"):
            st.switch_page("app.py")  # This will reload the page with the chat_page query param
    
    with col2:
        st.markdown("""
        <div class="card">
            <h3>üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA</h3>
            <p>‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA 4.0 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA", key="pmqa_btn"):
            st.switch_page("app.py")  # This will reload the page with the pmqa_structure_page query param

def upload_page():
    st.markdown('<div class="main-header">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</div>', unsafe_allow_html=True)
    st.markdown("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA 4.0 ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    with st.form("upload_form"):
        uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", type=["pdf", "docx", "doc", "txt", "md"])
        title = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        description = st.text_area("‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        author = st.text_input("‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        
        # PMQA Categories for selection
        categories = [
            "‡∏´‡∏°‡∏ß‡∏î_1", "‡∏´‡∏°‡∏ß‡∏î_2", "‡∏´‡∏°‡∏ß‡∏î_3", 
            "‡∏´‡∏°‡∏ß‡∏î_4", "‡∏´‡∏°‡∏ß‡∏î_5", "‡∏´‡∏°‡∏ß‡∏î_6", "‡∏´‡∏°‡∏ß‡∏î_7"
        ]
        category = st.selectbox("‡∏´‡∏°‡∏ß‡∏î PMQA (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)", [""] + categories)
        
        tags = st.text_input("‡πÅ‡∏ó‡πá‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤, ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        
        submit_button = st.form_submit_button("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
    
    if submit_button and uploaded_file is not None:
        # Display a spinner while uploading
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£..."):
            try:
                # Create form data
                form_data = {
                    "title": title if title else None,
                    "description": description if description else None,
                    "author": author if author else None,
                    "category": category if category else None,
                    "tags": tags if tags else None
                }
                
                # Remove None values
                form_data = {k: v for k, v in form_data.items() if v is not None}
                
                # Prepare the file
                files = {"file": (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)}
                
                # Send to API
                response = requests.post(
                    f"{API_BASE_URL}/documents",
                    files=files,
                    data=form_data
                )
                
                if response.status_code == 202:
                    document_id = response.json().get("document_id")
                    st.success(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•... (ID: {document_id})")
                    
                    # Display processing status
                    if document_id:
                        st.info("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:")
                        status_placeholder = st.empty()
                        progress_bar = st.progress(0)
                        
                        # Poll for status updates
                        complete = False
                        retry_count = 0
                        
                        while not complete and retry_count < 30:  # Timeout after 30 tries
                            try:
                                status_response = requests.get(f"{API_BASE_URL}/documents/{document_id}/status")
                                
                                if status_response.status_code == 200:
                                    status_data = status_response.json()
                                    status = status_data.get("status", "unknown")
                                    progress = status_data.get("progress", 0)
                                    
                                    # Update UI
                                    status_placeholder.text(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status}, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress}%")
                                    progress_bar.progress(progress / 100)
                                    
                                    if status == "completed":
                                        complete = True
                                        st.success("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                                        break
                                    elif status == "failed":
                                        st.error(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {status_data.get('error', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
                                        break
                                
                                time.sleep(1)  # Wait for 1 second before polling again
                                retry_count += 1
                                
                            except Exception as e:
                                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {str(e)}")
                                break
                        
                        if not complete and retry_count >= 30:
                            st.warning("‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á")
                else:
                    st.error(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.json().get('detail', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
            
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def documents_page():
    st.markdown('<div class="main-header">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</div>', unsafe_allow_html=True)
    st.markdown("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    
    # Filter options
    col1, col2, col3 = st.columns(3)
    
    with col1:
        category_filter = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î",
            ["", "‡∏´‡∏°‡∏ß‡∏î_1", "‡∏´‡∏°‡∏ß‡∏î_2", "‡∏´‡∏°‡∏ß‡∏î_3", "‡∏´‡∏°‡∏ß‡∏î_4", "‡∏´‡∏°‡∏ß‡∏î_5", "‡∏´‡∏°‡∏ß‡∏î_6", "‡∏´‡∏°‡∏ß‡∏î_7", "raw"]
        )
    
    with col2:
        author_filter = st.text_input("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
    
    with col3:
        keyword_filter = st.text_input("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    
    # Apply button
    if st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"):
        # Build query parameters
        params = {}
        if category_filter:
            params["category"] = category_filter
        if author_filter:
            params["author"] = author_filter
        if keyword_filter:
            params["keyword"] = keyword_filter
        
        # Fetch documents
        try:
            response = requests.get(f"{API_BASE_URL}/documents", params=params)
            
            if response.status_code == 200:
                documents_data = response.json()
                documents = documents_data.get("documents", [])
                total = documents_data.get("total", 0)
                
                # Display results
                st.success(f"‡∏û‡∏ö {total} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
                
                if documents:
                    # Create a DataFrame for display
                    df_data = []
                    
                    for doc in documents:
                        # Format datetime
                        created_at = datetime.fromisoformat(doc.get("created_at")) if "created_at" in doc else None
                        created_str = created_at.strftime("%d/%m/%Y %H:%M") if created_at else "N/A"
                        
                        # Format category
                        category = doc.get("category", "N/A")
                        
                        # Status indicator
                        processed = "‚úÖ" if doc.get("processed", False) else "‚è≥"
                        
                        df_data.append({
                            "ID": doc.get("id", ""),
                            "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": doc.get("title", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠"),
                            "‡∏´‡∏°‡∏ß‡∏î": category,
                            "‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô": doc.get("author", ""),
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á": created_str,
                            "‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•": processed,
                            "‡∏Ç‡∏ô‡∏≤‡∏î (bytes)": doc.get("size", 0)
                        })
                    
                    df = pd.DataFrame(df_data)
                    st.dataframe(df, use_container_width=True)
                    
                    # Select a document for more details
                    st.markdown("### ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
                    doc_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", [doc.get("id", "") for doc in documents])
                    
                    if doc_id:
                        # Find the selected document
                        selected_doc = next((doc for doc in documents if doc.get("id", "") == doc_id), None)
                        
                        if selected_doc:
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.markdown(f"**‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:** {selected_doc.get('title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}")
                                st.markdown(f"**‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:** {selected_doc.get('description', '-')}")
                                st.markdown(f"**‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:** {selected_doc.get('author', '-')}")
                                st.markdown(f"**‡∏´‡∏°‡∏ß‡∏î:** {selected_doc.get('category', '-')}")
                                
                                if 'pmqa_references' in selected_doc and selected_doc['pmqa_references']:
                                    st.markdown("**‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á PMQA:**")
                                    for ref in selected_doc['pmqa_references']:
                                        st.markdown(f"- {ref.get('category_name', '')} ({ref.get('category_id', '')})")
                            
                            with col2:
                                download_url = selected_doc.get("download_url", "")
                                if download_url:
                                    download_link = f"{API_BASE_URL}{download_url.lstrip('/')}"
                                    st.markdown(f"[üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£]({download_link})")
                                
                                st.markdown(f"**‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:** {'‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' if selected_doc.get('processed', False) else '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}")
                                st.markdown(f"**‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå:** {selected_doc.get('size', 0):,} bytes")
                                
                                if 'keywords' in selected_doc and selected_doc['keywords']:
                                    st.markdown("**‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**")
                                    st.write(", ".join(selected_doc['keywords']))
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
            else:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ: {response.json().get('detail', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def search_page():
    st.markdown('<div class="main-header">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>', unsafe_allow_html=True)
    st.markdown("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Vector Search ‡πÅ‡∏•‡∏∞ Graph Search")
    
    # Search options
    search_query = st.text_input("‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£...")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        search_type = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
            ["hybrid", "vector", "graph"],
            format_func=lambda x: {
                "hybrid": "Hybrid Search (‡∏ú‡∏™‡∏°)",
                "vector": "Vector Search (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á)",
                "graph": "Graph Search (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå)"
            }.get(x, x)
        )
    
    with col2:
        category_filter = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î",
            ["", "‡∏´‡∏°‡∏ß‡∏î_1", "‡∏´‡∏°‡∏ß‡∏î_2", "‡∏´‡∏°‡∏ß‡∏î_3", "‡∏´‡∏°‡∏ß‡∏î_4", "‡∏´‡∏°‡∏ß‡∏î_5", "‡∏´‡∏°‡∏ß‡∏î_6", "‡∏´‡∏°‡∏ß‡∏î_7"]
        )
    
    with col3:
        top_k = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", min_value=1, max_value=20, value=5)
    
    # Advanced options
    with st.expander("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"):
        if search_type == "hybrid":
            col1, col2 = st.columns(2)
            with col1:
                vector_weight = st.slider("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Vector Search", min_value=0.0, max_value=1.0, value=0.5, step=0.1)
            with col2:
                graph_weight = st.slider("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Graph Search", min_value=0.0, max_value=1.0, value=0.5, step=0.1)
        
        pmqa_category = st.selectbox("‡∏´‡∏°‡∏ß‡∏î PMQA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö Graph", [""] + [str(i) for i in range(1, 8)])
        pmqa_subcategory = st.text_input("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ PMQA (‡πÄ‡∏ä‡πà‡∏ô 1.1)")
    
    # Search button
    if st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤") and search_query:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."):
            try:
                # Build search request
                search_request = {
                    "query": search_query,
                    "filters": {}
                }
                
                # Add filters
                if category_filter:
                    search_request["filters"]["category"] = category_filter
                
                # Add PMQA reference for graph or hybrid search
                if (search_type in ["graph", "hybrid"]) and (pmqa_category or pmqa_subcategory):
                    pmqa_reference = {}
                    if pmqa_category:
                        pmqa_reference["category_id"] = pmqa_category
                    if pmqa_subcategory:
                        pmqa_reference["subcategory_id"] = pmqa_subcategory
                    
                    if pmqa_reference:
                        search_request["pmqa_reference"] = pmqa_reference
                
                # Add search type specific parameters
                if search_type == "vector":
                    search_request["top_k"] = top_k
                    search_url = f"{API_BASE_URL}/search/vector"
                
                elif search_type == "graph":
                    search_url = f"{API_BASE_URL}/search/graph"
                
                elif search_type == "hybrid":
                    search_request["top_k"] = top_k
                    search_request["vector_weight"] = vector_weight
                    search_request["graph_weight"] = graph_weight
                    search_url = f"{API_BASE_URL}/search/hybrid"
                
                # Execute search
                response = requests.post(search_url, json=search_request)
                
                if response.status_code == 200:
                    results = response.json()
                    search_results = results.get("results", [])
                    total_results = results.get("total_results", 0)
                    execution_time = results.get("execution_time_ms", 0)
                    
                    # Display results
                    st.success(f"‡∏û‡∏ö {total_results} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {execution_time:.2f} ms)")
                    
                    if search_results:
                        # Create tabs for different result views
                        tab1, tab2 = st.tabs(["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"])
                        
                        with tab1:
                            for i, result in enumerate(search_results):
                                with st.container():
                                    st.markdown(
                                        f"""
                                        <div style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; margin-bottom: 10px;">
                                            <h4>{i+1}. {result.get('document_title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}</h4>
                                            <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:</strong> {result.get('score', 0):.2f}</p>
                                            <p>{result.get('content', '')[:300]}...</p>
                                            <p><strong>PMQA:</strong> {', '.join([f"{ref.get('category_name', '')} ({ref.get('category_id', '')})" for ref in result.get('pmqa_references', [])])}</p>
                                        </div>
                                        """,
                                        unsafe_allow_html=True
                                    )
                        
                        with tab2:
                            # Select a result to view in detail
                            selected_idx = st.selectbox(
                                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                                range(len(search_results)),
                                format_func=lambda i: f"{i+1}. {search_results[i].get('document_title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}"
                            )
                            
                            # Display selected result
                            if selected_idx is not None:
                                selected_result = search_results[selected_idx]
                                
                                st.markdown(f"### {selected_result.get('document_title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}")
                                st.markdown(f"**Document ID:** {selected_result.get('document_id', '')}")
                                st.markdown(f"**Chunk ID:** {selected_result.get('chunk_id', '')}")
                                st.markdown(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** {selected_result.get('score', 0):.2f}")
                                
                                st.markdown("### ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:")
                                st.markdown(selected_result.get('content', ''))
                                
                                st.markdown("### ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á PMQA:")
                                if 'pmqa_references' in selected_result and selected_result['pmqa_references']:
                                    for ref in selected_result['pmqa_references']:
                                        st.markdown(
                                            f"- {ref.get('category_name', '')} ({ref.get('category_id', '')})"
                                            + (f" > {ref.get('subcategory_name', '')} ({ref.get('subcategory_id', '')})" if 'subcategory_name' in ref else "")
                                            + (f" > {ref.get('criteria_name', '')} ({ref.get('criteria_id', '')})" if 'criteria_name' in ref else "")
                                        )
                                else:
                                    st.markdown("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á PMQA")
                                
                                # Metadata
                                if 'metadata' in selected_result:
                                    st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:")
                                    for key, value in selected_result['metadata'].items():
                                        st.markdown(f"**{key}:** {value}")
                    else:
                        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                else:
                    st.error(f"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.json().get('detail', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def chat_page():
    st.markdown('<div class="main-header">‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Claude AI</div>', unsafe_allow_html=True)
    st.markdown("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PMQA 4.0 ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Claude AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á")
    
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Display chat history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            
            # Display sources if available
            if "sources" in message and message["sources"]:
                with st.expander("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"):
                    for i, source in enumerate(message["sources"]):
                        st.markdown(
                            f"**[{i+1}] ‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:** {source.get('document_title', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}"
                        )
                        st.markdown(f"*‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:* {source.get('content_snippet', '')}")
    
    # Chat options
    with st.expander("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö"):
        col1, col2 = st.columns(2)
        
        with col1:
            use_rag = st.checkbox("‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (RAG)", value=True)
            search_type = st.selectbox(
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
                ["hybrid", "vector", "graph"],
                format_func=lambda x: {
                    "hybrid": "Hybrid Search (‡∏ú‡∏™‡∏°)",
                    "vector": "Vector Search (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á)",
                    "graph": "Graph Search (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå)"
                }.get(x, x)
            )
        
        with col2:
            pmqa_category = st.selectbox("‡∏´‡∏°‡∏ß‡∏î PMQA", [""] + [str(i) for i in range(1, 8)])
            pmqa_subcategory = st.text_input("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ PMQA (‡πÄ‡∏ä‡πà‡∏ô 1.1)")
            max_tokens = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", 100, 3000, 1000)
    
    # Chat input
    query = st.chat_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PMQA 4.0...")
    
    if query:
        # Display user message
        with st.chat_message("user"):
            st.markdown(query)
        
        # Add user message to history
        st.session_state.messages.append({"role": "user", "content": query})
        
        # Process with Claude
        with st.chat_message("assistant"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..."):
                try:
                    # Build Claude query
                    claude_request = {
                        "query": query,
                        "use_rag": use_rag,
                        "search_type": search_type,
                        "max_tokens": max_tokens
                    }
                    
                    # Add PMQA reference if available
                    if pmqa_category or pmqa_subcategory:
                        pmqa_reference = {}
                        if pmqa_category:
                            pmqa_reference["category_id"] = pmqa_category
                        if pmqa_subcategory:
                            pmqa_reference["subcategory_id"] = pmqa_subcategory
                        
                        claude_request["pmqa_reference"] = pmqa_reference
                    
                    # Call Claude API
                    response = requests.post(f"{API_BASE_URL}/claude/query", json=claude_request)
                    
                    if response.status_code == 200:
                        claude_response = response.json()
                        answer = claude_response.get("answer", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")
                        sources = claude_response.get("sources", [])
                        
                        # Display answer
                        st.markdown(answer)
                        
                        # Display sources
                        if sources:
                            with st.expander("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"):
                                for i, source in enumerate(sources):
                                    st.markdown(
                                        f"**[{i+1}] ‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:** {source.get('document_title', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}"
                                    )
                                    st.markdown(f"*‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:* {source.get('content_snippet', '')}")
                        
                        # Add assistant message to history
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": answer,
                            "sources": sources
                        })
                    else:
                        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Claude AI ‡πÑ‡∏î‡πâ: {response.json().get('detail', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
                
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def pmqa_structure_page():
    st.markdown('<div class="main-header">‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA 4.0</div>', unsafe_allow_html=True)
    st.markdown("‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA 4.0 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå")
    
    try:
        # Fetch PMQA structure
        response = requests.get(f"{API_BASE_URL}/pmqa/structure")
        
        if response.status_code == 200:
            pmqa_data = response.json()
            categories = pmqa_data.get("categories", [])
            
            # Display structure as tabs
            category_tabs = st.tabs([f"‡∏´‡∏°‡∏ß‡∏î {cat['id']}" for cat in categories])
            
            for i, category in enumerate(categories):
                with category_tabs[i]:
                    st.markdown(f"## {category['name']} (‡∏´‡∏°‡∏ß‡∏î {category['id']})")
                    st.markdown(f"*{category['description']}*")
                    
                    # Subcategories
                    subcategories = category.get("subcategories", [])
                    
                    if subcategories:
                        for subcategory in subcategories:
                            st.markdown(f"### {subcategory['id']} {subcategory['name']}")
                            st.markdown(f"*{subcategory['description']}*")
                            
                            # Criteria
                            criteria = subcategory.get("criteria", [])
                            
                            if criteria:
                                for criterion in criteria:
                                    st.markdown(f"#### {criterion['id']} {criterion['name']}")
                                    st.markdown(f"*{criterion['description']}*")
                            else:
                                st.info(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ {subcategory['id']}")
                    else:
                        st.info(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {category['id']}")
        else:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PMQA ‡πÑ‡∏î‡πâ: {response.json().get('detail', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def system_status_page():
    st.markdown('<div class="main-header">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</div>', unsafe_allow_html=True)
    st.markdown("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
    
    try:
        # Check API health
        response = requests.get(f"{API_BASE_URL}/health")
        
        if response.status_code == 200:
            health_data = response.json()
            overall_status = health_data.get("status", "unknown")
            services = health_data.get("services", {})
            
            # Overall status
            if overall_status == "healthy":
                st.success("‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
            else:
                st.error("‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô")
            
            # Services status
            st.markdown("### ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
            
            # Create DataFrame for services
            df_data = []
            
            for service, status in services.items():
                icon = "‚úÖ" if status == "healthy" else "‚ùå"
                df_data.append({
                    "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£": service,
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": f"{icon} {status}"
                })
            
            df = pd.DataFrame(df_data)
            st.dataframe(df, use_container_width=True)
            
            # System information
            st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**API Version:** 1.0.0")
                st.markdown("**GraphRAG Version:** 1.0.0")
                st.markdown("**Claude AI:** Enabled")
            
            with col2:
                st.markdown("**Neo4j:** " + ("Connected" if services.get("neo4j") == "healthy" else "Not Connected"))
                st.markdown("**Chroma DB:** " + ("Connected" if services.get("chroma") == "healthy" else "Not Connected"))
                st.markdown("**Ollama:** Available")
        else:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {response.status_code}")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    main()
